apiVersion: v1
kind: Template
labels:
  app: turnpike
  template: turnpike-web
metadata:
  annotations:
    description: Turnpike API gateway - application server
    openshift.io/display-name: Turnpike Flask
  name: turnpike-web
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "redis", "kind": "Service"}]'
      prometheus.io/port: '5000'
      prometheus.io/scrape: 'true'
    name: web
  spec:
    ports:
    - name: 5000-tcp
      port: 5000
      protocol: TCP
      targetPort: 5000
    selector:
      name: web
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      service: web
    name: web
    annotations:
      ignore-check.kube-linter.io/minimum-three-replicas: "for turnpike-web we dont need 3 replicas"
  spec:
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        name: web
    template:
      metadata:
        labels:
          name: web
      spec:
        containers:
          - env:
              - name: PYTHONUNBUFFERED
                value: "1"
              - name: SECRET_KEY
                valueFrom:
                  secretKeyRef:
                    key: secret-key
                    name: secret-key
              - name: SERVER_NAME
                value: "${FLASK_SERVER_NAME}"
              - name: FLASK_ENV
                value: "${FLASK_ENV}"
              - name: WEB_ENV
                value: "${WEB_ENV}"
              - name: REDIS_HOST
                valueFrom:
                  secretKeyRef:
                    key: db.endpoint
                    name: in-memory-db
              - name: HEADER_CERTAUTH_PSK
                value: ${HEADER_CERTAUTH_PSK}
              - name: CDN_PRESHARED_KEY
                valueFrom:
                  secretKeyRef:
                    key: gateway-secret
                    name: gateway-secret
              - name: AUTH_DEBUG
                value: "${AUTH_DEBUG}"
              - name: NGINX_HEADER_BACKEND_MATCHING_ENABLED
                value: ${NGINX_HEADER_BACKEND_MATCHING_ENABLED}
              - name: SSO_OIDC_HOST
                value: ${SSO_OIDC_HOST}
              - name: SSO_OIDC_PORT
                value: ${SSO_OIDC_PORT}
              - name: SSO_OIDC_PROTOCOL_SCHEME
                value: ${SSO_OIDC_PROTOCOL_SCHEME}
              - name: SSO_OIDC_REALM
                value: ${SSO_OIDC_REALM}
            image: ${IMAGE}:${IMAGE_TAG}
            imagePullPolicy: Always
            name: web
            ports:
              - containerPort: 5000
                protocol: TCP
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /_healthcheck/
                port: 5000
                scheme: "HTTP"
                httpHeaders:
                  - name: x-forwarded-host
                    value: ${FLASK_SERVER_NAME}
                  - name: x-forwarded-port
                    value: '443'
                  - name: x-forwarded-proto
                    value: https
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 3
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /_healthcheck/
                port: 5000
                scheme: "HTTP"
                httpHeaders:
                  - name: x-forwarded-host
                    value: ${FLASK_SERVER_NAME}
                  - name: x-forwarded-port
                    value: '443'
                  - name: x-forwarded-proto
                    value: https
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 3
            resources:
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - mountPath: /usr/src/app/turnpike/saml/
                name: turnpike-saml
                readOnly: true
              - mountPath: /usr/src/app/turnpike/saml/certs
                name: turnpike-saml-signing
                readOnly: true
              - mountPath: /etc/turnpike
                name: turnpike-routes
                readOnly: true
            hostname: web
            terminationGracePeriodSeconds: 30
        imagePullSecrets:
        - name: quay-cloudservices-pull
        - name: rh-registry-pull
        volumes:
          - name: turnpike-saml
            configMap:
              name: turnpike-saml
          - configMap:
              name: turnpike-routes
            name: turnpike-routes
          - name: turnpike-saml-signing
            secret:
              secretName: saml-signing
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: turnpike
    name: turnpike-routes
    annotations:
      qontract.recycle: "true"
  data:
    backends.yml: |
      ${BACKEND_ROUTES}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: turnpike
    name: turnpike-saml
    annotations:
      qontract.recycle: "true"
  data:
    settings.json: |
      ${SETTINGS_JSON}
    advanced_settings.json: |
      ${ADVANCED_SETTINGS_JSON}
parameters:
- description: Initial amount of memory the Flask container will request.
  displayName: Memory Request
  name: MEMORY_REQUEST
  required: true
  value: 256Mi
- description: Maximum amount of memory the Flask container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Initial amount of cpu the Flask container will request.
  displayName: CPU Request
  name: CPU_REQUEST
  required: true
  value: 200m
- description: Maximum amount of cpu the Flask container can use.
  displayName: CPU Limit
  name: CPU_LIMIT
  required: true
  value: 500m
- description: Image tag
  name: IMAGE_TAG
  required: true
- description: Image url
  name: IMAGE
  value: quay.io/cloudservices/turnpike-web
- description: Header that Akamai sends with the PSK
  name: HEADER_CERTAUTH_PSK
  value: "x-rh-insights-gateway-secret"
- description: Effective hostname for this service
  name: FLASK_SERVER_NAME
  required: true
- description: Value for FLASK_ENV
  name: FLASK_ENV
  value: production
  required: true
- description: The environment turnpike web is running in
  name: WEB_ENV
  required: true
  value: stage
- description: Service name for Redis
  name: REDIS_SERVICE_NAME
  required: true
- description: OneLogin python3-saml settings.json content
  name: SETTINGS_JSON
  required: true
- description: OneLogin python3-saml advanced_settings.json content
  name: ADVANCED_SETTINGS_JSON
  required: true
- description: Backend route map
  name: BACKEND_ROUTES
  required: true
- description: Debug authentication backends
  name: AUTH_DEBUG
  value: ""
- description: Replica count for turnpike-web
  name: REPLICAS
  value: "1"
- description: Enables matching back ends by the "X-Matched-Backend" header Nginx forwards, instead of relying on parsing the route. Temporary variable.
  name: NGINX_HEADER_BACKEND_MATCHING_ENABLED
  value: "false"
- description: The host of the Single Sign On service that supports OIDC authentication and authorization.
  name: SSO_OIDC_HOST
  value: localhost
- description: The port of the SSO OIDC service.
  name: SSO_OIDC_PORT
  value: "443"
- description: The protocol scheme for the SSO OIDC service.
  name: SSO_OIDC_PROTOCOL_SCHEME
  value: https
- description: The realm Turnpike wants to validate the tokens against.
  name: SSO_OIDC_REALM
  value: realm
